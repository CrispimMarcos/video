{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\conta\\\\dev\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Instância do Axios para requisições à API\nconst api = axios.create({\n  baseURL: \"http://localhost:8000/api\"\n});\n\n// Interceptador para enviar access token em todas as requisições\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"access_token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Carregar usuário e tokens do localStorage ao iniciar\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    const storedAccess = localStorage.getItem(\"access_token\");\n    const storedRefresh = localStorage.getItem(\"refresh_token\");\n    if (storedUser && storedAccess && storedRefresh) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  // Função para login\n  const login = async (email, password) => {\n    try {\n      const res = await api.post(\"/login/\", {\n        email,\n        password\n      });\n      localStorage.setItem(\"access_token\", res.data.access);\n      localStorage.setItem(\"refresh_token\", res.data.refresh);\n      localStorage.setItem(\"user\", JSON.stringify(res.data.user));\n      setUser(res.data.user);\n      return res.data.user;\n    } catch (err) {\n      var _err$response;\n      console.error(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err);\n      throw new Error(\"Erro ao fazer login. Verifique suas credenciais.\");\n    }\n  };\n\n  // Função para registrar usuário e logar automaticamente\n  const register = async ({\n    nome,\n    email,\n    telefone,\n    password\n  }) => {\n    try {\n      await api.post(\"/register/\", {\n        nome,\n        email,\n        telefone,\n        password\n      });\n      // Login automático\n      return await login(email, password);\n    } catch (err) {\n      var _err$response2;\n      console.error(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err);\n      throw new Error(\"Erro ao registrar. Verifique os dados e tente novamente.\");\n    }\n  };\n\n  // Função para logout\n  const logout = () => {\n    localStorage.clear();\n    setUser(null);\n  };\n\n  // Função para renovar token (refresh)\n  const refreshToken = async () => {\n    try {\n      const refresh = localStorage.getItem(\"refresh_token\");\n      if (!refresh) throw new Error(\"No refresh token available\");\n      const res = await api.post(\"/token/refresh/\", {\n        refresh\n      });\n      localStorage.setItem(\"access_token\", res.data.access);\n      return res.data.access;\n    } catch (err) {\n      console.error(\"Erro ao renovar token:\", err);\n      logout();\n      throw err;\n    }\n  };\n\n  // Interceptador para tratar 401 e tentar renovar token\n  api.interceptors.response.use(response => response, async error => {\n    var _error$response;\n    const originalRequest = error.config;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        const newAccess = await refreshToken();\n        originalRequest.headers.Authorization = `Bearer ${newAccess}`;\n        return api(originalRequest);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n    return Promise.reject(error);\n  });\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","AuthProvider","children","_s","user","setUser","storedUser","storedAccess","storedRefresh","JSON","parse","login","email","password","res","post","setItem","data","access","refresh","stringify","err","_err$response","console","error","response","Error","register","nome","telefone","_err$response2","logout","clear","refreshToken","_error$response","originalRequest","status","_retry","newAccess","Promise","reject","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/conta/dev/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\n// Instância do Axios para requisições à API\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:8000/api\",\r\n});\r\n\r\n// Interceptador para enviar access token em todas as requisições\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"access_token\");\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Carregar usuário e tokens do localStorage ao iniciar\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"user\");\r\n    const storedAccess = localStorage.getItem(\"access_token\");\r\n    const storedRefresh = localStorage.getItem(\"refresh_token\");\r\n\r\n    if (storedUser && storedAccess && storedRefresh) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  // Função para login\r\n  const login = async (email, password) => {\r\n    try {\r\n      const res = await api.post(\"/login/\", { email, password });\r\n      localStorage.setItem(\"access_token\", res.data.access);\r\n      localStorage.setItem(\"refresh_token\", res.data.refresh);\r\n      localStorage.setItem(\"user\", JSON.stringify(res.data.user));\r\n      setUser(res.data.user);\r\n      return res.data.user;\r\n    } catch (err) {\r\n      console.error(err.response?.data || err);\r\n      throw new Error(\"Erro ao fazer login. Verifique suas credenciais.\");\r\n    }\r\n  };\r\n\r\n  // Função para registrar usuário e logar automaticamente\r\n  const register = async ({ nome, email, telefone, password }) => {\r\n    try {\r\n      await api.post(\"/register/\", { nome, email, telefone, password });\r\n      // Login automático\r\n      return await login(email, password);\r\n    } catch (err) {\r\n      console.error(err.response?.data || err);\r\n      throw new Error(\"Erro ao registrar. Verifique os dados e tente novamente.\");\r\n    }\r\n  };\r\n\r\n  // Função para logout\r\n  const logout = () => {\r\n    localStorage.clear();\r\n    setUser(null);\r\n  };\r\n\r\n  // Função para renovar token (refresh)\r\n  const refreshToken = async () => {\r\n    try {\r\n      const refresh = localStorage.getItem(\"refresh_token\");\r\n      if (!refresh) throw new Error(\"No refresh token available\");\r\n\r\n      const res = await api.post(\"/token/refresh/\", { refresh });\r\n      localStorage.setItem(\"access_token\", res.data.access);\r\n      return res.data.access;\r\n    } catch (err) {\r\n      console.error(\"Erro ao renovar token:\", err);\r\n      logout();\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Interceptador para tratar 401 e tentar renovar token\r\n  api.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n      const originalRequest = error.config;\r\n      if (error.response?.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        try {\r\n          const newAccess = await refreshToken();\r\n          originalRequest.headers.Authorization = `Bearer ${newAccess}`;\r\n          return api(originalRequest);\r\n        } catch (err) {\r\n          return Promise.reject(err);\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, register }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}